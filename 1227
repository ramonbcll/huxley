#include <stdio.h>
#include <string.h>
#include <stdlib.h>

//Armazena o primeiro item da fila
typedef struct _stack STACK;

//Armazena o conteudo do no e um ponteiro para o proximo no da fila
typedef struct _node NODE;

struct _stack
{
    NODE* head;
};
struct _node
{
    int element;
    NODE* next;
};

//Cria uma stack com o a head NULL
STACK* Create_stack();

//Recebe um elemento e cria e retorna um novo node
// com o elemento passado
NODE* create_node(int element);

//Verifica se a pilha esta vazia
int IS_EMPTY(STACK* stack);

//Recebe uma pilha e Retorna o elemento que esta no topo da fila
int POP(STACK* stack);

//Recebe uma pilha e um inteiro e retorna a nova pilha
//Adiciona um novo node no topo da pilha
void PUSH(STACK* stack, int element);

//Recebe a pilha e a operacao a ser feita
//faz a operacao da calculadora
void result(STACK* stack, char operation);

//Recebe uma pilha vazia e quantas strings serao lidas
//Le as n strings que vao seguir e resolve as expressoes
void Calculadora(STACK* calculadora, int size);

int main()
{
    STACK* calculadora = Create_stack();
    int k;
    scanf("%d", &k);
    Calculadora(calculadora, k);
    printf("Coordenada 1: %d\n", POP(calculadora));
    scanf("%d", &k);
    Calculadora(calculadora, k);
    printf("Coordenada 2: %d\n", POP(calculadora));

}
//Cria uma stack com o a head NULL
STACK* Create_stack() {
  STACK *stack = (STACK*) malloc(sizeof(STACK));
  stack->head = NULL;
  return stack;
}

//Recebe um elemento e cria e retorna um novo node
// com o elemento passado
NODE* create_node(int element) {
  NODE *node = (NODE*) malloc(sizeof(NODE));
  node->element = element;
  node->next = NULL;
  return node;
}

//Verifica se a pilha esta vazia
int IS_EMPTY(STACK* stack) {
  if(stack->head == NULL) {
  }
}

//Recebe uma pilha e Retorna o elemento que esta no topo da fila
int POP(STACK* stack) {
  int value = stack->head->element;
  NODE *el = stack->head;
  stack->head = stack->head->next;
  free(el);

  return value;
}

//Recebe uma pilha e um inteiro e retorna a nova pilha
//Adiciona um novo node no topo da pilha
void PUSH(STACK* stack, int element) {
  //printf("PUSH\n");
  NODE *new_node = create_node(element);
  new_node->next = stack->head;
  stack->head = new_node;
}

//Recebe a pilha e a operacao a ser feita
//faz a operacao da calculadora
void result(STACK* stack, char operation) {
  int n = POP(stack), m = POP(stack), total = 0;
  if(operation == '+') {
    total = m + n;
  }
  else if(operation == '-') {
    total = m - n;
  }
  else if(operation == '*') {
    total = m * n;
  }
  else if(operation == '/') {
    total = m / n;
  }
  PUSH(stack, total);
}

//Recebe uma pilha vazia e quantas strings serao lidas
//Le as n strings que vao seguir e resolve as expressoes
void Calculadora(STACK* calculadora, int size) {
  char c[size];
  int count = 0;

  while(count < size) {
    scanf(" %[^\n]", c);
    if(c[0] == '+' || c[0] == '-' || c[0] == '*' || c[0] == '/') {
      result(calculadora, c[0]);
    }
    else {
      int value = atoi(c);
      PUSH(calculadora, value);
    }
    count += 1;
  }
}
