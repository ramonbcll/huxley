#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct bt bt;

int count;

struct bt {
	int item;
	bt *left;
	bt *right;
};

bt* add(int item, bt *left, bt *right) {
	bt *new_bt = (bt*) malloc(sizeof(bt));
	new_bt->item = item;
	new_bt->left = left;
	new_bt->right = right;
	
	return new_bt;
}

bt* create(char *item) {
  char aux[256];
  int i = 0, tam = strlen(item);
  if(tam == count) {
    return NULL;
  }
  while(item[count] == '(' || item[count] == ' ') {
    count += 1;
  }
  if(item[count] == ')' || item[count] == ' ') {
    while(item[count] == ')' || item[count] == ' ') {
      count += 1;
    }
    return NULL;
  }
  if(item[count] == '-') {
    aux[i] = item[count];
    count += 1;
    i += 1;
  }
  while(item[count] >= '0' && item[count] <= '9') {
    aux[i] = item[count];
    count += 1;
    i += 1;
  }
  aux[i] = '\0';
  return add(atoi(aux), create(item), create(item));
}

void verify(bt* tree, int a[], int *num, int *ch) {
  if(tree == NULL) {
    return;
  }
  else {
    *ch += 1;

    if(tree->left != NULL && tree->right == NULL) {
      a[*num] = tree->item;
      *num += 1;
    }
    else if(tree->left == NULL && tree->right != NULL) {
      a[*num] = tree->item;
      *num += 1;
    }
    verify(tree->left, a, num, ch);
    verify(tree->right, a, num, ch);
  }
}

int main() {
  char item[256];
  int a[100], aux = 0, ch = 0, i;
  count = 0;
  for(i = 0; i < 100; i++) {
    a[i] = -1;
  }
  scanf(" %[^\n]", item);
  bt* b = create(item);
  verify(b, a, &aux, &ch);

  if(a[0] != -1) {
    printf("nao completa\n");
    printf("nos com um filho: ");
    
    for(i = aux - 1; i >= 0; i--) {
      printf(" %d", a[i]);
    }
    printf("\n");
  }
  else {
    printf("completa\n");
    printf("total de nos: %d\n", ch);
  }

  return 0;
}
